/*
 * generated by Xtext
 */
package hu.bme.mit.kk.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPeopleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPeoplePersonParserRuleCall_0_0 = (RuleCall)cPeopleAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cPeopleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cPeoplePersonParserRuleCall_1_0_1_0 = (RuleCall)cPeopleAssignment_1_0_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cPeopleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cPeoplePersonParserRuleCall_1_2_0 = (RuleCall)cPeopleAssignment_1_2.eContents().get(0);
		private final Keyword cAreOnTheIslandKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//Model:
		//	people+=Person ((',' people+=Person)* 'and' people+=Person) 'are on the island.'
		//	statements+=Statement+;
		@Override public ParserRule getRule() { return rule; }

		//people+=Person ((',' people+=Person)* 'and' people+=Person) 'are on the island.' statements+=Statement+
		public Group getGroup() { return cGroup; }

		//people+=Person
		public Assignment getPeopleAssignment_0() { return cPeopleAssignment_0; }

		//Person
		public RuleCall getPeoplePersonParserRuleCall_0_0() { return cPeoplePersonParserRuleCall_0_0; }

		//((',' people+=Person)* 'and' people+=Person)
		public Group getGroup_1() { return cGroup_1; }

		//(',' people+=Person)*
		public Group getGroup_1_0() { return cGroup_1_0; }

		//','
		public Keyword getCommaKeyword_1_0_0() { return cCommaKeyword_1_0_0; }

		//people+=Person
		public Assignment getPeopleAssignment_1_0_1() { return cPeopleAssignment_1_0_1; }

		//Person
		public RuleCall getPeoplePersonParserRuleCall_1_0_1_0() { return cPeoplePersonParserRuleCall_1_0_1_0; }

		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//people+=Person
		public Assignment getPeopleAssignment_1_2() { return cPeopleAssignment_1_2; }

		//Person
		public RuleCall getPeoplePersonParserRuleCall_1_2_0() { return cPeoplePersonParserRuleCall_1_2_0; }

		//'are on the island.'
		public Keyword getAreOnTheIslandKeyword_2() { return cAreOnTheIslandKeyword_2; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
	}

	public class PersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.Person");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Person:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPersonAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPersonPersonCrossReference_0_0 = (CrossReference)cPersonAssignment_0.eContents().get(0);
		private final RuleCall cPersonPersonIDTerminalRuleCall_0_0_1 = (RuleCall)cPersonPersonCrossReference_0_0.eContents().get(1);
		private final Keyword cSaysThatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Statement:
		//	person=[Person] 'says that' expression=Expression '.';
		@Override public ParserRule getRule() { return rule; }

		//person=[Person] 'says that' expression=Expression '.'
		public Group getGroup() { return cGroup; }

		//person=[Person]
		public Assignment getPersonAssignment_0() { return cPersonAssignment_0; }

		//[Person]
		public CrossReference getPersonPersonCrossReference_0_0() { return cPersonPersonCrossReference_0_0; }

		//ID
		public RuleCall getPersonPersonIDTerminalRuleCall_0_0_1() { return cPersonPersonIDTerminalRuleCall_0_0_1; }

		//'says that'
		public Keyword getSaysThatKeyword_1() { return cSaysThatKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.Expression");
		private final RuleCall cIffParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Iff;
		@Override public ParserRule getRule() { return rule; }

		//Iff
		public RuleCall getIffParserRuleCall() { return cIffParserRuleCall; }
	}

	public class IffElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.Iff");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cIffLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIfAndOnlyIfKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Iff Expression:
		//	Or ({Iff.left=current} 'if and only if' right=Or)?
		@Override public ParserRule getRule() { return rule; }

		//Or ({Iff.left=current} 'if and only if' right=Or)?
		public Group getGroup() { return cGroup; }

		//Or
		public RuleCall getOrParserRuleCall_0() { return cOrParserRuleCall_0; }

		//({Iff.left=current} 'if and only if' right=Or)?
		public Group getGroup_1() { return cGroup_1; }

		//{Iff.left=current}
		public Action getIffLeftAction_1_0() { return cIffLeftAction_1_0; }

		//'if and only if'
		public Keyword getIfAndOnlyIfKeyword_1_1() { return cIfAndOnlyIfKeyword_1_1; }

		//right=Or
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Or
		public RuleCall getRightOrParserRuleCall_1_2_0() { return cRightOrParserRuleCall_1_2_0; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or Expression:
		//	And ({Or.left=current} 'or' right=And)*
		@Override public ParserRule getRule() { return rule; }

		//And ({Or.left=current} 'or' right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} 'or' right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNegationableParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightNegationableParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And Expression:
		//	Negationable ({And.left=current} 'and' right=Negationable)*
		@Override public ParserRule getRule() { return rule; }

		//Negationable ({And.left=current} 'and' right=Negationable)*
		public Group getGroup() { return cGroup; }

		//Negationable
		public RuleCall getNegationableParserRuleCall_0() { return cNegationableParserRuleCall_0; }

		//({And.left=current} 'and' right=Negationable)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//right=Negationable
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Negationable
		public RuleCall getRightNegationableParserRuleCall_1_2_0() { return cRightNegationableParserRuleCall_1_2_0; }
	}

	public class NegationableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.Negationable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cItIsNotTrueThatKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cNegationableAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cValueAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cValuePrimaryParserRuleCall_1_0_2_0 = (RuleCall)cValueAssignment_1_0_2.eContents().get(0);
		private final RuleCall cKnaveReferenceParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//Negationable Expression:
		//	'but'? ('it is not true that' {Negationable} value=Primary | KnaveReference | Primary)
		@Override public ParserRule getRule() { return rule; }

		//'but'? ('it is not true that' {Negationable} value=Primary | KnaveReference | Primary)
		public Group getGroup() { return cGroup; }

		//'but'?
		public Keyword getButKeyword_0() { return cButKeyword_0; }

		//('it is not true that' {Negationable} value=Primary | KnaveReference | Primary)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//'it is not true that' {Negationable} value=Primary
		public Group getGroup_1_0() { return cGroup_1_0; }

		//'it is not true that'
		public Keyword getItIsNotTrueThatKeyword_1_0_0() { return cItIsNotTrueThatKeyword_1_0_0; }

		//{Negationable}
		public Action getNegationableAction_1_0_1() { return cNegationableAction_1_0_1; }

		//value=Primary
		public Assignment getValueAssignment_1_0_2() { return cValueAssignment_1_0_2; }

		//Primary
		public RuleCall getValuePrimaryParserRuleCall_1_0_2_0() { return cValuePrimaryParserRuleCall_1_0_2_0; }

		//KnaveReference
		public RuleCall getKnaveReferenceParserRuleCall_1_1() { return cKnaveReferenceParserRuleCall_1_1; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_1_2() { return cPrimaryParserRuleCall_1_2; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKnightReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIffParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary Expression:
		//	KnightReference |
		//	'(' Iff ')'
		@Override public ParserRule getRule() { return rule; }

		//KnightReference | '(' Iff ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//KnightReference
		public RuleCall getKnightReferenceParserRuleCall_0() { return cKnightReferenceParserRuleCall_0; }

		//'(' Iff ')'
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Iff
		public RuleCall getIffParserRuleCall_1_1() { return cIffParserRuleCall_1_1; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class KnightReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.KnightReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKnightReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPersonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPersonPersonCrossReference_1_0 = (CrossReference)cPersonAssignment_1.eContents().get(0);
		private final RuleCall cPersonPersonIDTerminalRuleCall_1_0_1 = (RuleCall)cPersonPersonCrossReference_1_0.eContents().get(1);
		private final Keyword cIsAKnightKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//KnightReference Expression:
		//	{KnightReference} person=[Person] 'is a knight'
		@Override public ParserRule getRule() { return rule; }

		//{KnightReference} person=[Person] 'is a knight'
		public Group getGroup() { return cGroup; }

		//{KnightReference}
		public Action getKnightReferenceAction_0() { return cKnightReferenceAction_0; }

		//person=[Person]
		public Assignment getPersonAssignment_1() { return cPersonAssignment_1; }

		//[Person]
		public CrossReference getPersonPersonCrossReference_1_0() { return cPersonPersonCrossReference_1_0; }

		//ID
		public RuleCall getPersonPersonIDTerminalRuleCall_1_0_1() { return cPersonPersonIDTerminalRuleCall_1_0_1; }

		//'is a knight'
		public Keyword getIsAKnightKeyword_2() { return cIsAKnightKeyword_2; }
	}

	public class KnaveReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hu.bme.mit.kk.dsl.Language.KnaveReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cKnaveReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPersonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPersonPersonCrossReference_1_0 = (CrossReference)cPersonAssignment_1.eContents().get(0);
		private final RuleCall cPersonPersonIDTerminalRuleCall_1_0_1 = (RuleCall)cPersonPersonCrossReference_1_0.eContents().get(1);
		private final Keyword cIsAKnaveKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//KnaveReference Expression:
		//	{KnaveReference} person=[Person] 'is a knave'
		@Override public ParserRule getRule() { return rule; }

		//{KnaveReference} person=[Person] 'is a knave'
		public Group getGroup() { return cGroup; }

		//{KnaveReference}
		public Action getKnaveReferenceAction_0() { return cKnaveReferenceAction_0; }

		//person=[Person]
		public Assignment getPersonAssignment_1() { return cPersonAssignment_1; }

		//[Person]
		public CrossReference getPersonPersonCrossReference_1_0() { return cPersonPersonCrossReference_1_0; }

		//ID
		public RuleCall getPersonPersonIDTerminalRuleCall_1_0_1() { return cPersonPersonIDTerminalRuleCall_1_0_1; }

		//'is a knave'
		public Keyword getIsAKnaveKeyword_2() { return cIsAKnaveKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final PersonElements pPerson;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final IffElements pIff;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final NegationableElements pNegationable;
	private final PrimaryElements pPrimary;
	private final KnightReferenceElements pKnightReference;
	private final KnaveReferenceElements pKnaveReference;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pPerson = new PersonElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pIff = new IffElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pNegationable = new NegationableElements();
		this.pPrimary = new PrimaryElements();
		this.pKnightReference = new KnightReferenceElements();
		this.pKnaveReference = new KnaveReferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.kk.dsl.Language".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	people+=Person ((',' people+=Person)* 'and' people+=Person) 'are on the island.'
	//	statements+=Statement+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Person:
	//	name=ID;
	public PersonElements getPersonAccess() {
		return pPerson;
	}
	
	public ParserRule getPersonRule() {
		return getPersonAccess().getRule();
	}

	//Statement:
	//	person=[Person] 'says that' expression=Expression '.';
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Expression:
	//	Iff;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Iff Expression:
	//	Or ({Iff.left=current} 'if and only if' right=Or)?
	public IffElements getIffAccess() {
		return pIff;
	}
	
	public ParserRule getIffRule() {
		return getIffAccess().getRule();
	}

	//Or Expression:
	//	And ({Or.left=current} 'or' right=And)*
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And Expression:
	//	Negationable ({And.left=current} 'and' right=Negationable)*
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Negationable Expression:
	//	'but'? ('it is not true that' {Negationable} value=Primary | KnaveReference | Primary)
	public NegationableElements getNegationableAccess() {
		return pNegationable;
	}
	
	public ParserRule getNegationableRule() {
		return getNegationableAccess().getRule();
	}

	//Primary Expression:
	//	KnightReference |
	//	'(' Iff ')'
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//KnightReference Expression:
	//	{KnightReference} person=[Person] 'is a knight'
	public KnightReferenceElements getKnightReferenceAccess() {
		return pKnightReference;
	}
	
	public ParserRule getKnightReferenceRule() {
		return getKnightReferenceAccess().getRule();
	}

	//KnaveReference Expression:
	//	{KnaveReference} person=[Person] 'is a knave'
	public KnaveReferenceElements getKnaveReferenceAccess() {
		return pKnaveReference;
	}
	
	public ParserRule getKnaveReferenceRule() {
		return getKnaveReferenceAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
