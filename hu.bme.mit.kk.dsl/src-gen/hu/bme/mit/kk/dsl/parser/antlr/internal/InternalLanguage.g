/*
 * generated by Xtext
 */
grammar InternalLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package hu.bme.mit.kk.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.bme.mit.kk.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.bme.mit.kk.dsl.services.LanguageGrammarAccess;

}

@parser::members {

 	private LanguageGrammarAccess grammarAccess;
 	
    public InternalLanguageParser(TokenStream input, LanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected LanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPeoplePersonParserRuleCall_0_0()); 
	    }
		lv_people_0_0=rulePerson		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"people",
        		lv_people_0_0, 
        		"hu.bme.mit.kk.dsl.Language.Person");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getCommaKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPeoplePersonParserRuleCall_1_0_1_0()); 
	    }
		lv_people_2_0=rulePerson		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"people",
        		lv_people_2_0, 
        		"hu.bme.mit.kk.dsl.Language.Person");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3='and' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getPeoplePersonParserRuleCall_1_2_0()); 
	    }
		lv_people_4_0=rulePerson		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"people",
        		lv_people_4_0, 
        		"hu.bme.mit.kk.dsl.Language.Person");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_5='are on the island.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getAreOnTheIslandKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_3_0()); 
	    }
		lv_statements_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"hu.bme.mit.kk.dsl.Language.Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRulePerson
entryRulePerson returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPersonRule()); }
	 iv_rulePerson=rulePerson 
	 { $current=$iv_rulePerson.current; } 
	 EOF 
;

// Rule Person
rulePerson returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPersonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getStatementAccess().getPersonPersonCrossReference_0_0()); 
	}

)
)	otherlv_1='says that' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getSaysThatKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"hu.bme.mit.kk.dsl.Language.Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getFullStopKeyword_3());
    }
)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getIffParserRuleCall()); 
    }
    this_Iff_0=ruleIff
    { 
        $current = $this_Iff_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleIff
entryRuleIff returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIffRule()); }
	 iv_ruleIff=ruleIff 
	 { $current=$iv_ruleIff.current; } 
	 EOF 
;

// Rule Iff
ruleIff returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIffAccess().getOrParserRuleCall_0()); 
    }
    this_Or_0=ruleOr
    { 
        $current = $this_Or_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getIffAccess().getIffLeftAction_1_0(),
            $current);
    }
)	otherlv_2='if and only if' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIffAccess().getIfAndOnlyIfKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIffAccess().getRightOrParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIffRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"hu.bme.mit.kk.dsl.Language.Or");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"hu.bme.mit.kk.dsl.Language.And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getNegationableParserRuleCall_0()); 
    }
    this_Negationable_0=ruleNegationable
    { 
        $current = $this_Negationable_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightNegationableParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleNegationable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"hu.bme.mit.kk.dsl.Language.Negationable");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNegationable
entryRuleNegationable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNegationableRule()); }
	 iv_ruleNegationable=ruleNegationable 
	 { $current=$iv_ruleNegationable.current; } 
	 EOF 
;

// Rule Negationable
ruleNegationable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='but' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNegationableAccess().getButKeyword_0());
    }
)?((	otherlv_1='it is not true that' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNegationableAccess().getItIsNotTrueThatKeyword_1_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getNegationableAccess().getNegationableAction_1_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNegationableAccess().getValuePrimaryParserRuleCall_1_0_2_0()); 
	    }
		lv_value_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNegationableRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"hu.bme.mit.kk.dsl.Language.Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getNegationableAccess().getKnaveReferenceParserRuleCall_1_1()); 
    }
    this_KnaveReference_4=ruleKnaveReference
    { 
        $current = $this_KnaveReference_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNegationableAccess().getPrimaryParserRuleCall_1_2()); 
    }
    this_Primary_5=rulePrimary
    { 
        $current = $this_Primary_5.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getKnightReferenceParserRuleCall_0()); 
    }
    this_KnightReference_0=ruleKnightReference
    { 
        $current = $this_KnightReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getIffParserRuleCall_1_1()); 
    }
    this_Iff_2=ruleIff
    { 
        $current = $this_Iff_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleKnightReference
entryRuleKnightReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKnightReferenceRule()); }
	 iv_ruleKnightReference=ruleKnightReference 
	 { $current=$iv_ruleKnightReference.current; } 
	 EOF 
;

// Rule KnightReference
ruleKnightReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKnightReferenceAccess().getKnightReferenceAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getKnightReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getKnightReferenceAccess().getPersonPersonCrossReference_1_0()); 
	}

)
)	otherlv_2='is a knight' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKnightReferenceAccess().getIsAKnightKeyword_2());
    }
)
;





// Entry rule entryRuleKnaveReference
entryRuleKnaveReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKnaveReferenceRule()); }
	 iv_ruleKnaveReference=ruleKnaveReference 
	 { $current=$iv_ruleKnaveReference.current; } 
	 EOF 
;

// Rule KnaveReference
ruleKnaveReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getKnaveReferenceAccess().getKnaveReferenceAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getKnaveReferenceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getKnaveReferenceAccess().getPersonPersonCrossReference_1_0()); 
	}

)
)	otherlv_2='is a knave' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getKnaveReferenceAccess().getIsAKnaveKeyword_2());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


