/*
 * generated by Xtext
 */
package hu.bme.mit.kk.dsl.serializer;

import com.google.inject.Inject;
import hu.bme.mit.kk.dsl.services.LanguageGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class LanguageSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LanguageGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Negationable_ButKeyword_0_q;
	protected AbstractElementAlias match_Negationable_Primary___ButKeyword_0_q_LeftParenthesisKeyword_1_0__a;
	protected AbstractElementAlias match_Negationable_Primary___ButKeyword_0_q_LeftParenthesisKeyword_1_0__p;
	protected AbstractElementAlias match_Negationable_Primary___LeftParenthesisKeyword_1_0_ButKeyword_0_q__a;
	protected AbstractElementAlias match_Negationable_Primary___LeftParenthesisKeyword_1_0_ButKeyword_0_q__p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LanguageGrammarAccess) access;
		match_Negationable_ButKeyword_0_q = new TokenAlias(false, true, grammarAccess.getNegationableAccess().getButKeyword_0());
		match_Negationable_Primary___ButKeyword_0_q_LeftParenthesisKeyword_1_0__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getNegationableAccess().getButKeyword_0()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()));
		match_Negationable_Primary___ButKeyword_0_q_LeftParenthesisKeyword_1_0__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getNegationableAccess().getButKeyword_0()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()));
		match_Negationable_Primary___LeftParenthesisKeyword_1_0_ButKeyword_0_q__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, true, grammarAccess.getNegationableAccess().getButKeyword_0()));
		match_Negationable_Primary___LeftParenthesisKeyword_1_0_ButKeyword_0_q__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(false, true, grammarAccess.getNegationableAccess().getButKeyword_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Negationable_ButKeyword_0_q.equals(syntax))
				emit_Negationable_ButKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Negationable_Primary___ButKeyword_0_q_LeftParenthesisKeyword_1_0__a.equals(syntax))
				emit_Negationable_Primary___ButKeyword_0_q_LeftParenthesisKeyword_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Negationable_Primary___ButKeyword_0_q_LeftParenthesisKeyword_1_0__p.equals(syntax))
				emit_Negationable_Primary___ButKeyword_0_q_LeftParenthesisKeyword_1_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Negationable_Primary___LeftParenthesisKeyword_1_0_ButKeyword_0_q__a.equals(syntax))
				emit_Negationable_Primary___LeftParenthesisKeyword_1_0_ButKeyword_0_q__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Negationable_Primary___LeftParenthesisKeyword_1_0_ButKeyword_0_q__p.equals(syntax))
				emit_Negationable_Primary___LeftParenthesisKeyword_1_0_ButKeyword_0_q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'but'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('(' (ambiguity))* 'it is not true that' value=Primary
	 *     (rule start) (ambiguity) ('(' (ambiguity))* person=[Person|ID]
	 */
	protected void emit_Negationable_ButKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('but'? '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) {And.left=}
	 *     (rule start) '(' (ambiguity) {Iff.left=}
	 *     (rule start) '(' (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Iff.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 */
	protected void emit_Negationable_Primary___ButKeyword_0_q_LeftParenthesisKeyword_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('but'? '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Iff.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 */
	protected void emit_Negationable_Primary___ButKeyword_0_q_LeftParenthesisKeyword_1_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' 'but'?)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'but'? (ambiguity) 'it is not true that' value=Primary
	 *     (rule start) 'but'? (ambiguity) person=[Person|ID]
	 *     (rule start) (ambiguity) person=[Person|ID]
	 */
	protected void emit_Negationable_Primary___LeftParenthesisKeyword_1_0_ButKeyword_0_q__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' 'but'?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'it is not true that' value=Primary
	 *     (rule start) (ambiguity) person=[Person|ID]
	 */
	protected void emit_Negationable_Primary___LeftParenthesisKeyword_1_0_ButKeyword_0_q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
