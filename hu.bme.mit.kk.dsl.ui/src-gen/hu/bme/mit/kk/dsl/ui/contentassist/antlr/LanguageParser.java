/*
* generated by Xtext
*/
package hu.bme.mit.kk.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import hu.bme.mit.kk.dsl.services.LanguageGrammarAccess;

public class LanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private LanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected hu.bme.mit.kk.dsl.ui.contentassist.antlr.internal.InternalLanguageParser createParser() {
		hu.bme.mit.kk.dsl.ui.contentassist.antlr.internal.InternalLanguageParser result = new hu.bme.mit.kk.dsl.ui.contentassist.antlr.internal.InternalLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getNegationAccess().getAlternatives(), "rule__Negation__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_1(), "rule__Model__Group_1__0");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getIffAccess().getGroup(), "rule__Iff__Group__0");
					put(grammarAccess.getIffAccess().getGroup_1(), "rule__Iff__Group_1__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getNegationAccess().getGroup_0(), "rule__Negation__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getVariableReferenceAccess().getGroup(), "rule__VariableReference__Group__0");
					put(grammarAccess.getModelAccess().getVariablesAssignment_0(), "rule__Model__VariablesAssignment_0");
					put(grammarAccess.getModelAccess().getVariablesAssignment_1_1(), "rule__Model__VariablesAssignment_1_1");
					put(grammarAccess.getModelAccess().getStatementsAssignment_2(), "rule__Model__StatementsAssignment_2");
					put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
					put(grammarAccess.getStatementAccess().getVariableAssignment_0(), "rule__Statement__VariableAssignment_0");
					put(grammarAccess.getStatementAccess().getExpressionAssignment_2(), "rule__Statement__ExpressionAssignment_2");
					put(grammarAccess.getIffAccess().getRightAssignment_1_2(), "rule__Iff__RightAssignment_1_2");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getNegationAccess().getValueAssignment_0_2(), "rule__Negation__ValueAssignment_0_2");
					put(grammarAccess.getVariableReferenceAccess().getValueAssignment_1(), "rule__VariableReference__ValueAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			hu.bme.mit.kk.dsl.ui.contentassist.antlr.internal.InternalLanguageParser typedParser = (hu.bme.mit.kk.dsl.ui.contentassist.antlr.internal.InternalLanguageParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
