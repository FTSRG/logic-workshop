/*
 * generated by Xtext
 */
grammar InternalLanguage;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package hu.bme.mit.kk.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package hu.bme.mit.kk.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import hu.bme.mit.kk.dsl.services.LanguageGrammarAccess;

}

@parser::members {
 
 	private LanguageGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LanguageGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePerson
entryRulePerson 
:
{ before(grammarAccess.getPersonRule()); }
	 rulePerson
{ after(grammarAccess.getPersonRule()); } 
	 EOF 
;

// Rule Person
rulePerson
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPersonAccess().getNameAssignment()); }
(rule__Person__NameAssignment)
{ after(grammarAccess.getPersonAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getGroup()); }
(rule__Statement__Group__0)
{ after(grammarAccess.getStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getIffParserRuleCall()); }
	ruleIff
{ after(grammarAccess.getExpressionAccess().getIffParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIff
entryRuleIff 
:
{ before(grammarAccess.getIffRule()); }
	 ruleIff
{ after(grammarAccess.getIffRule()); } 
	 EOF 
;

// Rule Iff
ruleIff
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIffAccess().getGroup()); }
(rule__Iff__Group__0)
{ after(grammarAccess.getIffAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOr
entryRuleOr 
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrAccess().getGroup()); }
(rule__Or__Group__0)
{ after(grammarAccess.getOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnd
entryRuleAnd 
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndAccess().getGroup()); }
(rule__And__Group__0)
{ after(grammarAccess.getAndAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNegationable
entryRuleNegationable 
:
{ before(grammarAccess.getNegationableRule()); }
	 ruleNegationable
{ after(grammarAccess.getNegationableRule()); } 
	 EOF 
;

// Rule Negationable
ruleNegationable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNegationableAccess().getGroup()); }
(rule__Negationable__Group__0)
{ after(grammarAccess.getNegationableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKnightReference
entryRuleKnightReference 
:
{ before(grammarAccess.getKnightReferenceRule()); }
	 ruleKnightReference
{ after(grammarAccess.getKnightReferenceRule()); } 
	 EOF 
;

// Rule KnightReference
ruleKnightReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKnightReferenceAccess().getGroup()); }
(rule__KnightReference__Group__0)
{ after(grammarAccess.getKnightReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKnaveReference
entryRuleKnaveReference 
:
{ before(grammarAccess.getKnaveReferenceRule()); }
	 ruleKnaveReference
{ after(grammarAccess.getKnaveReferenceRule()); } 
	 EOF 
;

// Rule KnaveReference
ruleKnaveReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKnaveReferenceAccess().getGroup()); }
(rule__KnaveReference__Group__0)
{ after(grammarAccess.getKnaveReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Negationable__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationableAccess().getGroup_1_0()); }
(rule__Negationable__Group_1_0__0)
{ after(grammarAccess.getNegationableAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getNegationableAccess().getKnaveReferenceParserRuleCall_1_1()); }
	ruleKnaveReference
{ after(grammarAccess.getNegationableAccess().getKnaveReferenceParserRuleCall_1_1()); }
)

    |(
{ before(grammarAccess.getNegationableAccess().getPrimaryParserRuleCall_1_2()); }
	rulePrimary
{ after(grammarAccess.getNegationableAccess().getPrimaryParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getKnightReferenceParserRuleCall_0()); }
	ruleKnightReference
{ after(grammarAccess.getPrimaryAccess().getKnightReferenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getGroup_1()); }
(rule__Primary__Group_1__0)
{ after(grammarAccess.getPrimaryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPeopleAssignment_0()); }
(rule__Model__PeopleAssignment_0)
{ after(grammarAccess.getModelAccess().getPeopleAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1()); }
(rule__Model__Group_1__0)
{ after(grammarAccess.getModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAreOnTheIslandKeyword_2()); }

	'are on the island.' 

{ after(grammarAccess.getModelAccess().getAreOnTheIslandKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModelAccess().getStatementsAssignment_3()); }
(rule__Model__StatementsAssignment_3)
{ after(grammarAccess.getModelAccess().getStatementsAssignment_3()); }
)
(
{ before(grammarAccess.getModelAccess().getStatementsAssignment_3()); }
(rule__Model__StatementsAssignment_3)*
{ after(grammarAccess.getModelAccess().getStatementsAssignment_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Model__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__0__Impl
	rule__Model__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1_0()); }
(rule__Model__Group_1_0__0)*
{ after(grammarAccess.getModelAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__1__Impl
	rule__Model__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAndKeyword_1_1()); }

	'and' 

{ after(grammarAccess.getModelAccess().getAndKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPeopleAssignment_1_2()); }
(rule__Model__PeopleAssignment_1_2)
{ after(grammarAccess.getModelAccess().getPeopleAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Model__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1_0__0__Impl
	rule__Model__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCommaKeyword_1_0_0()); }

	',' 

{ after(grammarAccess.getModelAccess().getCommaKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPeopleAssignment_1_0_1()); }
(rule__Model__PeopleAssignment_1_0_1)
{ after(grammarAccess.getModelAccess().getPeopleAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getPersonAssignment_0()); }
(rule__Statement__PersonAssignment_0)
{ after(grammarAccess.getStatementAccess().getPersonAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__1__Impl
	rule__Statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSaysThatKeyword_1()); }

	'says that' 

{ after(grammarAccess.getStatementAccess().getSaysThatKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__2__Impl
	rule__Statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getExpressionAssignment_2()); }
(rule__Statement__ExpressionAssignment_2)
{ after(grammarAccess.getStatementAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getFullStopKeyword_3()); }

	'.' 

{ after(grammarAccess.getStatementAccess().getFullStopKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Iff__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Iff__Group__0__Impl
	rule__Iff__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIffAccess().getOrParserRuleCall_0()); }
	ruleOr
{ after(grammarAccess.getIffAccess().getOrParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Iff__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Iff__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIffAccess().getGroup_1()); }
(rule__Iff__Group_1__0)?
{ after(grammarAccess.getIffAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Iff__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Iff__Group_1__0__Impl
	rule__Iff__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIffAccess().getIffLeftAction_1_0()); }
(

)
{ after(grammarAccess.getIffAccess().getIffLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Iff__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Iff__Group_1__1__Impl
	rule__Iff__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIffAccess().getIfAndOnlyIfKeyword_1_1()); }

	'if and only if' 

{ after(grammarAccess.getIffAccess().getIfAndOnlyIfKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Iff__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Iff__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIffAccess().getRightAssignment_1_2()); }
(rule__Iff__RightAssignment_1_2)
{ after(grammarAccess.getIffAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Or__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroup_1()); }
(rule__Or__Group_1__0)*
{ after(grammarAccess.getOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Or__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrKeyword_1_1()); }

	'or' 

{ after(grammarAccess.getOrAccess().getOrKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
(rule__Or__RightAssignment_1_2)
{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getNegationableParserRuleCall_0()); }
	ruleNegationable
{ after(grammarAccess.getAndAccess().getNegationableParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_1()); }
(rule__And__Group_1__0)*
{ after(grammarAccess.getAndAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__1__Impl
	rule__And__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndKeyword_1_1()); }

	'and' 

{ after(grammarAccess.getAndAccess().getAndKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
(rule__And__RightAssignment_1_2)
{ after(grammarAccess.getAndAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Negationable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negationable__Group__0__Impl
	rule__Negationable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negationable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationableAccess().getButKeyword_0()); }
(
	'but' 
)?
{ after(grammarAccess.getNegationableAccess().getButKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negationable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negationable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negationable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationableAccess().getAlternatives_1()); }
(rule__Negationable__Alternatives_1)
{ after(grammarAccess.getNegationableAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Negationable__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negationable__Group_1_0__0__Impl
	rule__Negationable__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Negationable__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationableAccess().getItIsNotTrueThatKeyword_1_0_0()); }

	'it is not true that' 

{ after(grammarAccess.getNegationableAccess().getItIsNotTrueThatKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negationable__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negationable__Group_1_0__1__Impl
	rule__Negationable__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Negationable__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationableAccess().getNegationableAction_1_0_1()); }
(

)
{ after(grammarAccess.getNegationableAccess().getNegationableAction_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Negationable__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Negationable__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Negationable__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationableAccess().getValueAssignment_1_0_2()); }
(rule__Negationable__ValueAssignment_1_0_2)
{ after(grammarAccess.getNegationableAccess().getValueAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Primary__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__0__Impl
	rule__Primary__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__1__Impl
	rule__Primary__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getIffParserRuleCall_1_1()); }
	ruleIff
{ after(grammarAccess.getPrimaryAccess().getIffParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Primary__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__KnightReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KnightReference__Group__0__Impl
	rule__KnightReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KnightReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKnightReferenceAccess().getKnightReferenceAction_0()); }
(

)
{ after(grammarAccess.getKnightReferenceAccess().getKnightReferenceAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KnightReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KnightReference__Group__1__Impl
	rule__KnightReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KnightReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKnightReferenceAccess().getPersonAssignment_1()); }
(rule__KnightReference__PersonAssignment_1)
{ after(grammarAccess.getKnightReferenceAccess().getPersonAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KnightReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KnightReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KnightReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKnightReferenceAccess().getIsAKnightKeyword_2()); }

	'is a knight' 

{ after(grammarAccess.getKnightReferenceAccess().getIsAKnightKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__KnaveReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KnaveReference__Group__0__Impl
	rule__KnaveReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KnaveReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKnaveReferenceAccess().getKnaveReferenceAction_0()); }
(

)
{ after(grammarAccess.getKnaveReferenceAccess().getKnaveReferenceAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KnaveReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KnaveReference__Group__1__Impl
	rule__KnaveReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KnaveReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKnaveReferenceAccess().getPersonAssignment_1()); }
(rule__KnaveReference__PersonAssignment_1)
{ after(grammarAccess.getKnaveReferenceAccess().getPersonAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KnaveReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KnaveReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KnaveReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKnaveReferenceAccess().getIsAKnaveKeyword_2()); }

	'is a knave' 

{ after(grammarAccess.getKnaveReferenceAccess().getIsAKnaveKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__PeopleAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPeoplePersonParserRuleCall_0_0()); }
	rulePerson{ after(grammarAccess.getModelAccess().getPeoplePersonParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PeopleAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPeoplePersonParserRuleCall_1_0_1_0()); }
	rulePerson{ after(grammarAccess.getModelAccess().getPeoplePersonParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__PeopleAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getPeoplePersonParserRuleCall_1_2_0()); }
	rulePerson{ after(grammarAccess.getModelAccess().getPeoplePersonParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StatementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_3_0()); }
	ruleStatement{ after(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Person__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getPersonAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__PersonAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getPersonPersonCrossReference_0_0()); }
(
{ before(grammarAccess.getStatementAccess().getPersonPersonIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getStatementAccess().getPersonPersonIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getStatementAccess().getPersonPersonCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getStatementAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Iff__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIffAccess().getRightOrParserRuleCall_1_2_0()); }
	ruleOr{ after(grammarAccess.getIffAccess().getRightOrParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	ruleAnd{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightNegationableParserRuleCall_1_2_0()); }
	ruleNegationable{ after(grammarAccess.getAndAccess().getRightNegationableParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Negationable__ValueAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNegationableAccess().getValuePrimaryParserRuleCall_1_0_2_0()); }
	rulePrimary{ after(grammarAccess.getNegationableAccess().getValuePrimaryParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KnightReference__PersonAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKnightReferenceAccess().getPersonPersonCrossReference_1_0()); }
(
{ before(grammarAccess.getKnightReferenceAccess().getPersonPersonIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getKnightReferenceAccess().getPersonPersonIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getKnightReferenceAccess().getPersonPersonCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KnaveReference__PersonAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKnaveReferenceAccess().getPersonPersonCrossReference_1_0()); }
(
{ before(grammarAccess.getKnaveReferenceAccess().getPersonPersonIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getKnaveReferenceAccess().getPersonPersonIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getKnaveReferenceAccess().getPersonPersonCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


